// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: profile_service.proto

package profile // import "gitlab.com/stream/buffers/profile"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "gitlab.com/stream/buffers/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileServiceClient interface {
	// Get a Logged In User Profile
	GetProfile(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*ProfileInfo, error)
	// Inserts Logged In User Profile
	InsertProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*ProfileInfo, error)
	// Updates a Logged In User Profile
	UpdateProfile(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*ProfileInfo, error)
	// Insert a sample travel post
	InsertTravelPost(ctx context.Context, in *TravelPost, opts ...grpc.CallOption) (*TravelPost, error)
	// Get a travel post
	GetTravelPost(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*TravelPost, error)
}

type profileServiceClient struct {
	cc *grpc.ClientConn
}

func NewProfileServiceClient(cc *grpc.ClientConn) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetProfile(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*ProfileInfo, error) {
	out := new(ProfileInfo)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) InsertProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*ProfileInfo, error) {
	out := new(ProfileInfo)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/InsertProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfile(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*ProfileInfo, error) {
	out := new(ProfileInfo)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) InsertTravelPost(ctx context.Context, in *TravelPost, opts ...grpc.CallOption) (*TravelPost, error) {
	out := new(TravelPost)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/InsertTravelPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetTravelPost(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*TravelPost, error) {
	out := new(TravelPost)
	err := c.cc.Invoke(ctx, "/profile.ProfileService/GetTravelPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
type ProfileServiceServer interface {
	// Get a Logged In User Profile
	GetProfile(context.Context, *common.Request) (*ProfileInfo, error)
	// Inserts Logged In User Profile
	InsertProfile(context.Context, *ProfileInfo) (*ProfileInfo, error)
	// Updates a Logged In User Profile
	UpdateProfile(context.Context, *common.Request) (*ProfileInfo, error)
	// Insert a sample travel post
	InsertTravelPost(context.Context, *TravelPost) (*TravelPost, error)
	// Get a travel post
	GetTravelPost(context.Context, *common.Request) (*TravelPost, error)
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfile(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_InsertProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).InsertProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/InsertProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).InsertProfile(ctx, req.(*ProfileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_InsertTravelPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TravelPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).InsertTravelPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/InsertTravelPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).InsertTravelPost(ctx, req.(*TravelPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetTravelPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetTravelPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileService/GetTravelPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetTravelPost(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _ProfileService_GetProfile_Handler,
		},
		{
			MethodName: "InsertProfile",
			Handler:    _ProfileService_InsertProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileService_UpdateProfile_Handler,
		},
		{
			MethodName: "InsertTravelPost",
			Handler:    _ProfileService_InsertTravelPost_Handler,
		},
		{
			MethodName: "GetTravelPost",
			Handler:    _ProfileService_GetTravelPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile_service.proto",
}

func init() {
	proto.RegisterFile("profile_service.proto", fileDescriptor_profile_service_146cef670d6eae93)
}

var fileDescriptor_profile_service_146cef670d6eae93 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x4f,
	0xcb, 0xcc, 0x49, 0x8d, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x87, 0x0a, 0x4b, 0xf1, 0x24, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0x41, 0x84, 0xa5,
	0x84, 0x60, 0xaa, 0x33, 0xf3, 0xd2, 0xf2, 0x21, 0x62, 0x46, 0xeb, 0x99, 0xb8, 0xf8, 0x02, 0x20,
	0xc2, 0xc1, 0x10, 0x33, 0x84, 0x8c, 0xb9, 0xb8, 0xdc, 0x53, 0x4b, 0xa0, 0x82, 0x42, 0xfc, 0x7a,
	0x50, 0x33, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0x44, 0xf4, 0xa0, 0xc6, 0xe8, 0x41,
	0x95, 0x78, 0xe6, 0xa5, 0xe5, 0x0b, 0x59, 0x73, 0xf1, 0x7a, 0xe6, 0x15, 0xa7, 0x16, 0xc1, 0xf5,
	0x61, 0x55, 0x86, 0x43, 0xb3, 0x19, 0x17, 0x6f, 0x68, 0x41, 0x4a, 0x62, 0x49, 0x2a, 0x89, 0x96,
	0xda, 0x70, 0x09, 0x40, 0x2c, 0x0d, 0x29, 0x4a, 0x2c, 0x4b, 0xcd, 0x09, 0xc8, 0x2f, 0x2e, 0x11,
	0x12, 0x86, 0xab, 0x44, 0x08, 0x4a, 0x61, 0x13, 0x14, 0x32, 0xe5, 0xe2, 0x75, 0x4f, 0x45, 0xd6,
	0x8a, 0x61, 0x2b, 0x36, 0x6d, 0x4e, 0xc6, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8,
	0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0x8a, 0xe9, 0x99, 0x25, 0x39, 0x89, 0x49,
	0x20, 0xdd, 0xfa, 0xc5, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0xfa, 0x49, 0xa5, 0x69, 0x69, 0xa9, 0x45,
	0xc5, 0xfa, 0x50, 0xfd, 0x49, 0x6c, 0xe0, 0xd0, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0xc7, 0xde, 0x8e, 0xb1, 0x01, 0x00, 0x00,
}
